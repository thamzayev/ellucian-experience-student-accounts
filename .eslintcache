[{"C:\\node\\experience\\student-account\\src\\cards\\StudentAccountCard.jsx":"1","C:\\Node\\experience\\student-account\\src\\cards\\StudentAccountCard.jsx":"2"},{"size":3602,"mtime":1658302885225,"results":"3","hashOfConfig":"4"},{"size":3878,"mtime":1660738715964,"results":"5","hashOfConfig":"6"},{"filePath":"7","messages":"8","suppressedMessages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"14ltzyw",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lempsy","C:\\node\\experience\\student-account\\src\\cards\\StudentAccountCard.jsx",["14","15"],[],"import { withStyles } from '@ellucian/react-design-system/core/styles';\nimport { spacing40 } from '@ellucian/react-design-system/core/styles/tokens';\nimport { Typography } from '@ellucian/react-design-system/core';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nconst styles = () => ({\n    card: {\n        marginTop: 0,\n        marginRight: spacing40,\n        marginBottom: 0,\n        marginLeft: spacing40\n    }\n});\nconst cacheKey = 'student-account-card:total';\n// const totalCharges = chargesGraphQLResult.data.studentCharges16.edges.reduce(function (result, item) {\n//     return result + item.node.chargedAmount.amount;\n// }, 0);\n// const totalPayments = paymentsGraphQLResult.data.studentPayments16.edges.reduce(function (result, item) {\n//     return result + item.node.amount;\n//   }, 0);\n\n\nconst StudentAccountCard = (props) => {\n    const {\n        classes,\n        cardControl: {\n            setLoadingStatus,\n            setErrorMessage\n        },\n        data: { getEthosQuery },\n        cache: { getItem, storeItem }\n    } = props;\n    const [totalCharges, setTotalCharges] = useState();\n    const [totalPayments, setTotalPayments] = useState();\n    const [total, setTotal] = useState();\n    useEffect(() => {\n        (async () => {\n            setLoadingStatus(true);\n\n            const {data: cachedData, expired: cachedDataExpired=true} = await getItem({key: cacheKey});\n            if (cachedData) {\n                setLoadingStatus(false);\n                setTotal(() => cachedData);\n            }\n            if (cachedDataExpired || cachedData === undefined) {\n                try {\n                    const chargesData = await getEthosQuery({ queryId: 'list-charges' });\n                    const paymentsData = await getEthosQuery({ queryId: 'list-payments' });\n                    const { data: { studentCharges16: { edges: chargeEdges } = [] } = {} } = chargesData;\n                    const { data: { studentPayments16: { edges: paymentEdges } = [] } = {} } = paymentsData;\n                    const totalCharges = chargeEdges.reduce((result, item) => result + item.node.chargedAmount.amount, 0);\n                    const totalPayments = paymentEdges.reduce((result, item) => result + item.node.amount, 0);\n\n                    setTotalCharges(() => totalCharges);\n                    setTotalPayments(() => totalPayments);\n                    setTotal(() => (totalPayments - totalCharges));\n                    storeItem({ key: cacheKey, data: total });\n                    setLoadingStatus(false);\n                } catch (error) {\n                    console.log('ethosQuery failed', error);\n                    setErrorMessage({\n                        headerMessage: 'Fetch failed',\n                        textMessage: 'Fetching data from student account has failed. Try again later.',\n                        iconName: 'error',\n                        iconColor: '#D42828'\n                    });\n                }\n            }\n        })();\n    }, []);\n\n\n    return (\n        <div className={classes.card}>\n            <Typography variant=\"h2\">\n                Hello StudentAccount World\n            </Typography>\n            <Typography>\n                <span>\n                    {total}\n                </span>\n            </Typography>\n        </div>\n    );\n};\n\nStudentAccountCard.propTypes = {\n    cardControl: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired,\n    cache: PropTypes.object.isRequired,\n    data: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(StudentAccountCard);","C:\\Node\\experience\\student-account\\src\\cards\\StudentAccountCard.jsx",[],[],{"ruleId":"16","severity":1,"message":"17","line":34,"column":12,"nodeType":"18","messageId":"19","endLine":34,"endColumn":24},{"ruleId":"16","severity":1,"message":"20","line":35,"column":12,"nodeType":"18","messageId":"19","endLine":35,"endColumn":25},"no-unused-vars","'totalCharges' is assigned a value but never used.","Identifier","unusedVar","'totalPayments' is assigned a value but never used."]